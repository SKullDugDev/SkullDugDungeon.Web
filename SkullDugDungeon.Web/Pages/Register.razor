@page "/Register"
@using SkullDugDungeon.Shared.Domain
@using SkullDugDungeon.Shared.Helpers

<PageTitle>Registration</PageTitle>
<div class="baseblock">
    <EditForm class="formBlock" Model="@_registration">
        <div class="formBlock_headerBlock">
            <h1 class="headerBlock_Header">User Registration</h1>
        </div>
        <div class="formBlock_formRow">
            <div class="formRow_entryBlock">
                <div class="entryBlock_formEntry">
                    <InputText class="formEntry_formControl" @bind-Value="_registration.UserName" id="userNameInput" DisplayName="Username" placeholder=" "></InputText>
                    <label class="formEntry_formLabel" for="userNameInput">Username</label>
                    <div class="formEntry_formNotch">
                        <div class="formNotch_leadingNotch"></div>
                        <div class="formNotch_middleNotch formNotch_userNameNotch"></div>
                        <div class="formNotch_trailingNotch"></div>
                    </div>

                </div>
            </div>
        </div>
        <div class="formBlock_formRow">
            <div class="formRow_entryBlock">
                <div class="entryBlock_formEntry">
                    <InputText class="formEntry_formControl" @bind-Value="_registration.Email" id="emailInput" placeholder=" "></InputText>
                    <label class="formEntry_formLabel" for="emailInput">Email</label>
                    <div class="formEntry_formNotch">
                        <div class="formNotch_leadingNotch"></div>
                        <div class="formNotch_middleNotch formNotch_emailNotch"></div>
                        <div class="formNotch_trailingNotch"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="formBlock_formRow">
            <div class="formRow_entryBlock">
                <div class="entryBlock_formEntry formEntry_formControl formEntry_switchBlock">
                    <label class="formEntry_switch">
                        <InputCheckbox class="switch_switchInput" @bind-Value="_pickAsDm" id="roleSwitch"/>
                        <span class="switch_switchState">
                            <label class="switchState_switchOption switchState_playerSwitchOption" for="roleSwitch" hidden>Player</label>
                            <label class="switchState_switchOption switchState_dmSwitchOption" for="roleSwitch">DM</label>
                        </span>
                        <div class="switch_handleBlock">
                            <span class="handleBlock_switchToggle"></span>
                        </div>
                        <div class="formEntry_formNotch">
                            <div class="formNotch_leadingNotch"></div>
                            <div class="formNotch_middleNotch formNotch_roleNotch"></div>
                            <div class="formNotch_trailingNotch"></div>
                        </div>
                    </label>
                    <label class="formEntry_formLabel formEntry_switchLabel" for="roleSwitch">Role</label>
                </div>
            </div>
            <div class="formRow_entryBlock">
                <div class="entryBlock_formEntry formEntry_formControl formEntry_selectBlock">
                    <InputSelect class="formEntry_selectControl" @bind-Value="_gamesSelected" id="gamesSelect" name="SelectedGames" DisplayName="SelectedGames">



                        @foreach (var system in _gameSystems)
                        {
                            @* by default no option should be disabled so we set the field to start off as false and allow it to be changed. *@

                            _selectOptionDisabled = false;

                            @*see if there exists an already selected game with the same GameSystem
                             if not, _selectedGame will be null*@

                            _selectedGame = _gamesSelected.FirstOrDefault(selectedGame => selectedGame.GameSystem == system);

                            @*if such a selection exists and it uses a different _pickAsDm value than what we are currently using, disable it as a selection;
                              otherwise, leave it as not disabled and carry on.*@

                            if (_selectedGame is not null && _selectedGame.IsDungeonMaster != _pickAsDm) _selectOptionDisabled = true;


                            @*sets the current selection option using the system taken from _gameSystems and the current _pickAsDm value*@
                            _selectOption = new SelectedGame(system, _pickAsDm);


                            <option class="selectControl_selectOptions" value="@_selectOption" disabled="@_selectOptionDisabled"></option>
                        }


                    </InputSelect>

                    <label class="formEntry_formLabel formEntry_selectLabel" for="gamesSelect">Game</label>
                    <div class="formEntry_formNotch">
                        <div class="formNotch_leadingNotch"></div>
                        <div class="formNotch_middleNotch formNotch_gameNotch"></div>
                        <div class="formNotch_trailingNotch"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="formBlock_formRow">
            <div class="formRow_buttonEntry pb-4">
                <div class="buttonEntry_buttonBlock">
                    <button type="submit" class="buttonBlock_submitButton btn btn-primary">Register</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code
{
    //private bool _selected = false;
    //private int[] _gamesSelected


    // represents the list of valid games
    private readonly List<GameSystem> _gameSystems = GameSystemHelper.GetGameSystems();

    // represents the registration form Model the form will be bound to
    private readonly RegistrationForm _registration = new();


    // represents an <option> for the gamesSelect drop-down; initialized to avoid nullability.
    // default instance: GameSystem = None & IsDungeonMaster = false; is placeholder and not used.
    // gamesSelect instance: IsDungeonMaster = _pickAsDM & GameSystem = one member from _gameSystems.

    private SelectedGame _selectOption = new();

    // represents an array of games selected; initialized w/ default _selectOption to avoid nullability.
    // binding to gamesSelect as array allows multiple selections; each selection is a _selectOption element;
    // if _gamesSelected is an array composed of just the default _selectOption, then no games have been selected.


    private SelectedGame[] _gamesSelected = { new() };

    // represents a game that has already been selected and can thus be found in _gamesSelected;
    // nullable; if null, game wasn't found in _gamesSelected and thus no such game has already been selected.

    private SelectedGame? _selectedGame;


    // represents whether games are currently being selected as a Player or as a DM.
    private bool _pickAsDm;


    // represents whether a _selectOption should be disabled because it was selected already for the opposing role.

    private bool _selectOptionDisabled;



}